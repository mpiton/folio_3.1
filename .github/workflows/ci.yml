name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Exécution hebdomadaire pour les audits de sécurité

permissions:
  contents: read
  checks: read
  pull-requests: write
  issues: write

env:
  MONGO_USER: ${{ secrets.MONGO_USER }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  MONGO_DB: ${{ secrets.MONGO_DB }}
  MONGO_URL: ${{ secrets.MONGO_URL }}
  MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
  MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  BACKUP_DIR: ${{ secrets.BACKUP_DIR }}
  RETENTION_DAYS: ${{ secrets.RETENTION_DAYS }}
  BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
  RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
  SENDER_NAME: ${{ secrets.SENDER_NAME }}
  SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
  HOST: ${{ secrets.HOST }}
  PORT: ${{ secrets.PORT }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0-rc
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ env.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGO_INITDB_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ env.MONGO_INITDB_DATABASE }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@a54c7afa936fefeb4456b2dd8068152669aa8203
      with:
        toolchain: 1.89.0
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          portfolio/api/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: |
        cd portfolio/api
        cargo fmt --all -- --check

    - name: Run clippy
      run: |
        cd portfolio/api
        cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: |
        cd portfolio/api
        cargo build --verbose

    - name: Run tests
      run: |
        cd portfolio/api
        cargo test --verbose -- --test-threads=1

  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run cargo-audit
        run: |
          cd portfolio/api
          cargo audit

      - name: Run cargo-deny check advisories
        run: |
          cd portfolio/api
          cargo deny check advisories

      - name: Create Security Report
        if: failure()
        run: |
          echo "## Security Audit Results" > ${{ github.workspace }}-SECURITY_REPORT.md
          echo "Security vulnerabilities were found. Please review the job logs for details." >> ${{ github.workspace }}-SECURITY_REPORT.md

      - name: Comment PR
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@d70566966bbb446d06887700f68d905602745985
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('${{ github.workspace }}-SECURITY_REPORT.md', 'utf8');
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: report
            });
