---
import RssCard from "../common/RssCard.astro";
import Toast from "../common/Toast.astro";

interface Props {
    items: {
        title: string;
        link: string;
        pubDate: string;
        imageUrl: string;
    }[];
}

const { items } = Astro.props;

// Convertir les dates des items
const itemsWithDateObjects = items.map((item) => ({
    ...item,
    pubDate: new Date(item.pubDate),
}));
---

<section class="px-4 py-8 md:py-12">
    <div class="max-w-7xl mx-auto">
        <div
            class="articles-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12"
        >
            {itemsWithDateObjects.map((item) => <RssCard {...item} />)}
        </div>
        <button
            class="block mx-auto px-8 py-4 text-lg font-semibold bg-primary hover:bg-primary-dark text-accent rounded-lg transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
            id="loadMore"
            type="button"
            data-testid="load-more"
            aria-label="Charger plus d'articles"
        >
            Charger plus d'articles
        </button>
        <!-- Toast caché par défaut -->
        <div class="hidden">
            <Toast
                id="rss-error"
                type="error"
                title="Erreur"
                message="Une erreur est survenue lors du chargement des articles"
                showCloseButton={true}
            />
        </div>
    </div>
</section>

<script>
    import { ToastManager, type ToastOptions } from "../../scripts/ToastManager";

    interface RssItem {
        title: string;
        link?: string;
        url?: string;
        pubDate?: string;
        pub_date?: string;
        imageUrl?: string;
        image_url?: string;
    }

    let currentPage = 1;
    let isLoading = false;
    const loadMoreBtn = document.getElementById(
        "loadMore"
    ) as HTMLButtonElement | null;
    const articlesContainer = document.querySelector(".articles-grid");

    // Fonction utilitaire pour afficher un toast
    const showToast = (type: ToastOptions['type'], title: string, message: string) => {
        const event = new CustomEvent<ToastOptions>('showToast', {
            detail: {
                type,
                title,
                message,
                duration: 5000
            }
        });
        document.dispatchEvent(event);
    };

    function formatArticleDate(item: RssItem): string {
        const date = new Date(item.pub_date || item.pubDate || Date.now());
        return date.toLocaleDateString("fr-FR", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
    }

    function createArticleHtml(item: RssItem): string {
        return `
            <article class="rss-article bg-secondary rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                <div class="relative h-48 overflow-hidden">
                    <img
                        src="${item.image_url || item.imageUrl || "https://placehold.co/600x400"}"
                        alt="${item.title}"
                        loading="lazy"
                        class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                    />
                </div>
                <div class="p-6">
                    <h3 class="text-xl font-heading font-semibold text-text mb-2 line-clamp-2">
                        ${item.title}
                    </h3>
                    <p class="text-sm text-text-light mb-4">
                        ${formatArticleDate(item)}
                    </p>
                    <a
                        href="${item.url || item.link || "#"}"
                        target="_blank"
                        rel="noopener noreferrer"
                        class="inline-block text-primary font-semibold hover:text-primary-dark transition-colors duration-300"
                    >
                        Lire l'article
                        <span class="sr-only">Ouvrir ${item.title} dans un nouvel onglet</span>
                    </a>
                </div>
            </article>
        `;
    }

    async function loadMoreArticles() {
        if (!articlesContainer || !loadMoreBtn || isLoading) return;

        try {
            isLoading = true;
            loadMoreBtn.disabled = true;
            loadMoreBtn.textContent = "Chargement...";

            const API_URL =
                import.meta.env.PUBLIC_API_URL || "http://localhost:8080";
            const response = await fetch(
                `${API_URL}/api/rss?page=${currentPage + 1}&limit=9`
            );

            if (!response.ok) {
                throw new Error(`Erreur HTTP: ${response.status}`);
            }

            const newItems = await response.json() as RssItem[];

            if (!Array.isArray(newItems) || newItems.length === 0) {
                loadMoreBtn.textContent = "Plus d'articles disponibles";
                loadMoreBtn.disabled = true;
                loadMoreBtn.classList.add("hidden");
                return;
            }

            // Créer un fragment pour ajouter tous les articles d'un coup
            const fragment = document.createDocumentFragment();
            for (const item of newItems) {
                const tempDiv = document.createElement("div");
                tempDiv.innerHTML = createArticleHtml(item);
                fragment.appendChild(tempDiv.firstElementChild!);
            }

            // Ajouter le fragment au conteneur
            articlesContainer.appendChild(fragment);

            currentPage++;
            loadMoreBtn.textContent = "Charger plus d'articles";
            loadMoreBtn.disabled = false;
        } catch (error) {
            console.error("Erreur lors du chargement des articles:", error);
            showToast('error', 'Erreur', 'Une erreur est survenue lors du chargement des articles');
            loadMoreBtn.textContent = "Charger plus d'articles";
            loadMoreBtn.disabled = false;
        } finally {
            isLoading = false;
        }
    }

    // Ajouter l'écouteur d'événement pour le chargement
    if (loadMoreBtn) {
        loadMoreBtn.addEventListener("click", loadMoreArticles);
    }

    // Initialiser le gestionnaire de toast
    document.addEventListener('DOMContentLoaded', () => {
        ToastManager.getInstance();
    });
</script>
