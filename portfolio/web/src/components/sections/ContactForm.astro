---
import Button from "../common/Button.astro";
import Input from "../common/Input.astro";

interface Props {
    class?: string;
}

const { class: className = "" } = Astro.props;
---

<section class:list={["contact-form", className]}>
    <form id="contact-form" class="form" novalidate>
        <div class="form-group">
            <Input
                type="text"
                name="name"
                label="Nom"
                placeholder="Votre nom"
                required
                data-testid="contact-name"
            />
        </div>
        <div class="form-group">
            <Input
                type="email"
                name="email"
                label="Email"
                placeholder="votre@email.com"
                required
                data-testid="contact-email"
            />
        </div>
        <div class="form-group">
            <Input
                type="text"
                name="subject"
                label="Sujet"
                placeholder="Sujet de votre message"
                required
                data-testid="contact-subject"
            />
        </div>
        <div class="form-group">
            <Input
                type="textarea"
                name="message"
                label="Message"
                placeholder="Votre message"
                required
                data-testid="contact-message"
            />
        </div>
        <div class="form-submit">
            <Button
                type="submit"
                variant="primary"
                data-testid="contact-submit"
                class="flex items-center gap-2"
            >
                <i class="fas fa-paper-plane" aria-hidden="true"></i>
                Envoyer
            </Button>
        </div>
    </form>
</section>

<script>
    import { ToastManager } from "../../scripts/ToastManager";

    class ContactForm {
        private form: HTMLFormElement;
        private apiUrl: string;
        private toastManager: ToastManager;

        constructor() {
            const form = document.getElementById("contact-form");
            if (!(form instanceof HTMLFormElement)) {
                throw new Error("Form element not found");
            }
            this.form = form;
            this.apiUrl = import.meta.env.PUBLIC_API_URL || "http://localhost:8080";
            this.toastManager = ToastManager.getInstance();
            this.initialize();
        }

        initialize() {
            this.form.addEventListener("submit", this.handleSubmit.bind(this));

            // Ajouter la validation sur le blur des champs
            const requiredFields = this.form.querySelectorAll("[required]");
            requiredFields.forEach((field) => {
                if (
                    field instanceof HTMLInputElement ||
                    field instanceof HTMLTextAreaElement
                ) {
                    field.addEventListener("blur", () => {
                        this.validateField(field);
                    });
                }
            });
        }

        validateText(text: string): boolean {
            const SAFE_TEXT_REGEX = /^[\p{L}\p{N}\s.,!?@()'\[\]\-_&+=%°:;]+$/u;
            return SAFE_TEXT_REGEX.test(text);
        }

        validateField(field: HTMLInputElement | HTMLTextAreaElement) {
            const value = field.value.trim();

            if (!value) {
                this.showError(field, "Ce champ est requis");
                return false;
            }

            switch (field.name) {
                case "name":
                    if (value.length < 2 || value.length > 100) {
                        this.showError(
                            field,
                            "Le nom doit faire entre 2 et 100 caractères"
                        );
                        return false;
                    }
                    if (!this.validateText(value)) {
                        this.showError(
                            field,
                            "Le nom contient des caractères non autorisés"
                        );
                        return false;
                    }
                    break;
                case "email":
                    if (!this.isValidEmail(value)) {
                        this.showError(field, "L'email n'est pas valide");
                        return false;
                    }
                    break;
                case "subject":
                    if (value.length < 2 || value.length > 100) {
                        this.showError(
                            field,
                            "Le sujet doit faire entre 2 et 100 caractères"
                        );
                        return false;
                    }
                    if (!this.validateText(value)) {
                        this.showError(
                            field,
                            "Le sujet contient des caractères non autorisés"
                        );
                        return false;
                    }
                    break;
                case "message":
                    if (value.length < 10 || value.length > 1000) {
                        this.showError(
                            field,
                            "Le message doit faire entre 10 et 1000 caractères"
                        );
                        return false;
                    }
                    if (!this.validateText(value)) {
                        this.showError(
                            field,
                            "Le message contient des caractères non autorisés"
                        );
                        return false;
                    }
                    break;
            }

            this.removeError(field);
            return true;
        }

        validateForm() {
            const requiredFields = this.form.querySelectorAll("[required]");
            let isValid = true;

            requiredFields.forEach((field) => {
                if (
                    field instanceof HTMLInputElement ||
                    field instanceof HTMLTextAreaElement
                ) {
                    if (!this.validateField(field)) {
                        isValid = false;
                    }
                }
            });

            return isValid;
        }

        showError(field: HTMLElement, message: string) {
            if (!(field instanceof HTMLElement)) return;

            const wrapper =
                field.closest(".input-wrapper") || field.closest(".form-group");

            // Supprimer le message d'erreur
            const errorMessage = wrapper?.querySelector(".error-message");
            if (errorMessage) {
                errorMessage.remove();
            }

            // Créer le nouveau message d'erreur avec les classes Tailwind
            const errorDiv = document.createElement("div");
            errorDiv.className =
                "error-message flex items-center gap-2 mt-1.5 p-2.5 text-sm font-medium text-red-800 bg-red-50/80 border-l-4 border-l-red-500 rounded-r-md dark:text-red-300 dark:bg-red-900/20 dark:border-l-red-500";
            errorDiv.innerHTML = `<i class="fas fa-exclamation-circle text-red-500 dark:text-red-400" aria-hidden="true"></i>${message}`;

            // Ajouter la classe error au champ et son container
            field.classList.add("error");
            const container =
                field.closest(".input-container") ||
                field.closest(".textarea-container");
            container?.classList.add("error");

            // Ajouter le message d'erreur à la fin du wrapper
            wrapper?.appendChild(errorDiv);
        }

        removeError(field: HTMLElement) {
            if (!(field instanceof HTMLElement)) return;

            const wrapper =
                field.closest(".input-wrapper") || field.closest(".form-group");

            // Supprimer le message d'erreur
            const errorMessage = wrapper?.querySelector(".error-message");
            if (errorMessage) {
                errorMessage.remove();
            }

            // Supprimer les classes d'erreur
            field.classList.remove("error");
            const container =
                field.closest(".input-container") ||
                field.closest(".textarea-container");
            container?.classList.remove("error");
        }

        isValidEmail(email: string): boolean {
            const EMAIL_REGEX = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return EMAIL_REGEX.test(email);
        }

        escapeHtml(unsafe: string): string {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        private async handleSubmit(event: Event) {
            event.preventDefault();
            
            if (!this.validateForm()) {
                this.toastManager.show({
                    type: 'error',
                    title: 'Erreur',
                    message: 'Veuillez remplir tous les champs requis correctement',
                    duration: 5000
                });
                return;
            }

            const formData = new FormData(this.form);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch(`${this.apiUrl}/api/contact`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data),
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                this.toastManager.show({
                    type: 'success',
                    title: 'Succès',
                    message: 'Message envoyé avec succès',
                    duration: 5000
                });
                this.form.reset();
            } catch (error) {
                console.error("Error:", error);
                this.toastManager.show({
                    type: 'error',
                    title: 'Erreur',
                    message: 'Une erreur est survenue lors de l\'envoi du message',
                    duration: 5000
                });
            }
        }
    }

    // Initialiser le formulaire
    new ContactForm();
</script>

<style>
    .contact-form {
        @apply w-full max-w-2xl mx-auto;
    }

    .form {
        @apply space-y-6;
    }

    .form-group {
        @apply space-y-2;
    }

    .form-group label {
        @apply block text-sm font-medium text-gray-700 dark:text-gray-200;
    }

    .form-group .required {
        @apply text-red-500 ml-0.5;
    }

    .textarea-container {
        @apply relative;
    }

    .textarea-container textarea {
        @apply block w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-green-500 focus:border-green-500 bg-secondary dark:border-gray-600 dark:focus:ring-green-500 dark:focus:border-green-500 dark:text-white resize-none h-32;
    }

    .textarea-container .textarea-icon {
        @apply absolute right-3 top-3 text-gray-400 dark:text-gray-500;
    }

    .form-submit {
        @apply flex justify-end;
    }

    /* Toast animations */
    .toast--cloned {
        @apply fixed bottom-4 right-4 opacity-0 transform translate-y-2 transition-all duration-300 ease-out z-50;
    }

    .toast--visible {
        @apply opacity-100 translate-y-0;
    }

    /* Error states */
    .input-container.error input,
    .textarea-container.error textarea {
        @apply border-red-500 focus:ring-red-500 focus:border-red-500;
    }

    .message-label {
        @apply font-semibold text-text text-[0.95rem] font-heading flex items-center gap-1 transition-colors duration-200;
    }
</style>
