---
import Button from "../common/Button.astro";
import Input from "../common/Input.astro";
import Toast from "../common/Toast.astro";

interface Props {
    class?: string;
}

const { class: className = "" } = Astro.props;
---

<section class:list={["contact-form", className]}>
    <Toast
        type="success"
        title="Message envoyé !"
        message="Votre message a bien été envoyé. Je vous répondrai dans les plus brefs délais."
        id="contact-success"
    />
    <Toast
        type="error"
        title="Erreur"
        message="Une erreur est survenue lors de l'envoi du message. Veuillez réessayer."
        id="contact-error"
    />

    <form id="contact-form" class="form" novalidate>
        <div class="form-group">
            <Input
                type="text"
                name="name"
                label="Nom"
                placeholder="Votre nom"
                required
                data-testid="contact-name"
            />
        </div>
        <div class="form-group">
            <Input
                type="email"
                name="email"
                label="Email"
                placeholder="votre@email.com"
                required
                data-testid="contact-email"
            />
        </div>
        <div class="form-group">
            <Input
                type="text"
                name="subject"
                label="Sujet"
                placeholder="Sujet de votre message"
                required
                data-testid="contact-subject"
            />
        </div>
        <div class="form-group">
            <label for="message">
                Message
                <span class="required">*</span>
            </label>
            <div class="textarea-container">
                <textarea
                    id="message"
                    name="message"
                    placeholder="Votre message"
                    required
                    data-testid="contact-message"></textarea>
                <i class="textarea-icon fas fa-comment-alt" aria-hidden="true"
                ></i>
            </div>
        </div>
        <div class="form-submit">
            <Button
                type="submit"
                variant="primary"
                data-testid="contact-submit"
                class="flex items-center gap-2"
            >
                <i class="fas fa-paper-plane" aria-hidden="true"></i>
                Envoyer
            </Button>
        </div>
    </form>
</section>

<script>
    class ContactForm {
        private form: HTMLFormElement;
        private successToast: HTMLElement | null;
        private errorToast: HTMLElement | null;
        private apiUrl: string;

        constructor() {
            const form = document.getElementById("contact-form");
            if (!(form instanceof HTMLFormElement)) {
                throw new Error("Form element not found");
            }
            this.form = form;
            this.successToast = document.getElementById("contact-success");
            this.errorToast = document.getElementById("contact-error");
            this.apiUrl =
                import.meta.env.PUBLIC_API_URL || "http://localhost:8080";
            this.initialize();
        }

        initialize() {
            this.form.addEventListener("submit", this.handleSubmit.bind(this));

            // Ajouter la validation sur le blur des champs
            const requiredFields = this.form.querySelectorAll("[required]");
            requiredFields.forEach((field) => {
                if (
                    field instanceof HTMLInputElement ||
                    field instanceof HTMLTextAreaElement
                ) {
                    field.addEventListener("blur", () => {
                        this.validateField(field);
                    });
                }
            });
        }

        validateText(text: string): boolean {
            const SAFE_TEXT_REGEX = /^[\p{L}\p{N}\s.,!?@()'\[\]\-_&+=%°:;]+$/u;
            return SAFE_TEXT_REGEX.test(text);
        }

        validateField(field: HTMLInputElement | HTMLTextAreaElement) {
            const value = field.value.trim();

            if (!value) {
                this.showError(field, "Ce champ est requis");
                return false;
            }

            switch (field.name) {
                case "name":
                    if (value.length < 2 || value.length > 100) {
                        this.showError(
                            field,
                            "Le nom doit faire entre 2 et 100 caractères"
                        );
                        return false;
                    }
                    if (!this.validateText(value)) {
                        this.showError(
                            field,
                            "Le nom contient des caractères non autorisés"
                        );
                        return false;
                    }
                    break;
                case "email":
                    if (!this.isValidEmail(value)) {
                        this.showError(field, "L'email n'est pas valide");
                        return false;
                    }
                    break;
                case "subject":
                    if (value.length < 2 || value.length > 100) {
                        this.showError(
                            field,
                            "Le sujet doit faire entre 2 et 100 caractères"
                        );
                        return false;
                    }
                    if (!this.validateText(value)) {
                        this.showError(
                            field,
                            "Le sujet contient des caractères non autorisés"
                        );
                        return false;
                    }
                    break;
                case "message":
                    if (value.length < 10 || value.length > 1000) {
                        this.showError(
                            field,
                            "Le message doit faire entre 10 et 1000 caractères"
                        );
                        return false;
                    }
                    if (!this.validateText(value)) {
                        this.showError(
                            field,
                            "Le message contient des caractères non autorisés"
                        );
                        return false;
                    }
                    break;
            }

            this.removeError(field);
            return true;
        }

        validateForm() {
            const requiredFields = this.form.querySelectorAll("[required]");
            let isValid = true;

            requiredFields.forEach((field) => {
                if (
                    field instanceof HTMLInputElement ||
                    field instanceof HTMLTextAreaElement
                ) {
                    if (!this.validateField(field)) {
                        isValid = false;
                    }
                }
            });

            return isValid;
        }

        showError(field: HTMLElement, message: string) {
            if (!(field instanceof HTMLElement)) return;

            const wrapper =
                field.closest(".input-wrapper") || field.closest(".form-group");

            // Supprimer l'ancien message d'erreur s'il existe
            const oldError = wrapper?.querySelector(".error-message");
            if (oldError) {
                oldError.remove();
            }

            // Créer le nouveau message d'erreur avec les classes Tailwind
            const errorDiv = document.createElement("div");
            errorDiv.className =
                "error-message flex items-center gap-2 mt-1.5 p-2.5 text-sm font-medium text-red-800 bg-red-50/80 border-l-4 border-l-red-500 rounded-r-md dark:text-red-300 dark:bg-red-900/20 dark:border-l-red-500";
            errorDiv.innerHTML = `<i class="fas fa-exclamation-circle text-red-500 dark:text-red-400" aria-hidden="true"></i>${message}`;

            // Ajouter la classe error au champ et son container
            field.classList.add("error");
            const container =
                field.closest(".input-container") ||
                field.closest(".textarea-container");
            container?.classList.add("error");

            // Ajouter le message d'erreur à la fin du wrapper
            wrapper?.appendChild(errorDiv);
        }

        removeError(field: HTMLElement) {
            if (!(field instanceof HTMLElement)) return;

            const wrapper =
                field.closest(".input-wrapper") || field.closest(".form-group");
            const errorDiv = wrapper?.querySelector(".error-message");
            if (errorDiv) {
                errorDiv.remove();
            }

            field.classList.remove("error");
            const container =
                field.closest(".input-container") ||
                field.closest(".textarea-container");
            container?.classList.remove("error");
        }

        isValidEmail(email: string) {
            return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
        }

        escapeHtml(unsafe: string): string {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        async handleSubmit(event: Event) {
            event.preventDefault();

            if (!this.validateForm()) {
                return;
            }

            const formData = new FormData(this.form);
            const rawData = Object.fromEntries(formData.entries());

            // Échapper les données avant l'envoi
            const data = {
                name: this.escapeHtml(rawData.name as string),
                email: this.escapeHtml(rawData.email as string),
                subject: this.escapeHtml(rawData.subject as string),
                message: this.escapeHtml(rawData.message as string),
            };

            try {
                const response = await fetch(`${this.apiUrl}/api/contact`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data),
                });

                const responseData = await response.text();

                if (!response.ok) {
                    // Essayer de parser l'erreur comme JSON
                    try {
                        const errorData = JSON.parse(responseData);
                        if (
                            errorData.message &&
                            errorData.message.includes("Validation error")
                        ) {
                            // Extraire le message d'erreur spécifique
                            const errorMatch = errorData.message.match(
                                /Validation error: (.+)/
                            );
                            if (errorMatch) {
                                const [field, message] =
                                    errorMatch[1].split(": ");
                                const fieldElement = this.form.querySelector(
                                    `[name="${field}"]`
                                ) as HTMLElement;
                                if (fieldElement) {
                                    this.showError(fieldElement, message);
                                    return;
                                }
                            }
                        }
                    } catch (e) {
                        // Si ce n'est pas du JSON, utiliser le message d'erreur brut
                        console.error("Error parsing response:", e);
                    }
                    // Si on ne peut pas traiter l'erreur spécifiquement, montrer l'erreur générique
                    if (this.errorToast) {
                        this.showToast(this.errorToast);
                    }
                    return;
                }

                this.form.reset();
                if (this.successToast) {
                    this.showToast(this.successToast);
                }
            } catch (error) {
                console.error("Error submitting form:", error);
                if (this.errorToast) {
                    this.showToast(this.errorToast);
                }
            }
        }

        showToast(toast: HTMLElement) {
            if (!(toast instanceof HTMLElement)) return;

            const clonedToast = toast.cloneNode(true);
            if (!(clonedToast instanceof HTMLElement)) return;

            clonedToast.classList.add("toast--cloned");
            document.body.appendChild(clonedToast);

            // Utiliser le ToastManager global
            if (window.ToastManager) {
                const toastManager = new window.ToastManager(clonedToast);
                toastManager.show();
            }
        }
    }

    // Initialize the form when the DOM is loaded
    document.addEventListener("DOMContentLoaded", () => {
        new ContactForm();
    });
</script>

<style>
    .contact-form {
        width: 100%;
    }

    .form {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        width: 100%;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    label {
        font-weight: 600;
        color: var(--text-color);
        font-size: 0.95rem;
        font-family: var(--font-heading);
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    label .required {
        color: var(--error-color);
    }

    .textarea-container {
        position: relative;
        display: flex;
        align-items: flex-start;
    }

    .textarea-icon {
        position: absolute;
        left: 1rem;
        top: 0.875rem;
        color: #9ca3af;
        font-size: 1rem;
        transition: all 0.2s ease-in-out;
        pointer-events: none;
    }

    textarea {
        width: 100%;
        min-height: 150px;
        padding: 0.875rem 1rem;
        padding-left: 2.75rem;
        border: 1.5px solid #e5e7eb;
        border-radius: 0.5rem;
        background-color: var(--bg-color);
        color: var(--text-color);
        font-family: var(--font-body);
        font-size: 1rem;
        resize: vertical;
        transition: all 0.2s ease-in-out;
    }

    textarea::placeholder {
        color: #9ca3af;
        opacity: 0.7;
        transition: opacity 0.2s ease;
    }

    textarea:hover::placeholder {
        opacity: 0.9;
    }

    /* États du textarea */
    .textarea-container:hover textarea:not(:focus):not(.error) {
        border-color: var(--primary-color);
        box-shadow: 0 2px 4px rgba(87, 142, 126, 0.05);
    }

    .textarea-container:hover .textarea-icon {
        color: var(--primary-color);
        transform: translateY(-1px);
    }

    textarea:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(87, 142, 126, 0.15);
        background-color: #fafafa;
    }

    textarea:focus::placeholder {
        opacity: 0.5;
    }

    /* Styles d'erreur pour le textarea */
    .textarea-container.error textarea {
        border-color: #dc2626;
        background-color: #fef2f2;
        border-width: 1.5px;
    }

    .textarea-container.error .textarea-icon {
        color: #dc2626;
    }

    .textarea-container.error textarea:focus {
        box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.15);
    }

    /* Mode sombre */
    @media (prefers-color-scheme: dark) {
        textarea {
            border-color: #374151;
            background-color: rgba(17, 24, 39, 0.3);
        }

        textarea:focus {
            background-color: rgba(17, 24, 39, 0.5);
        }

        textarea::placeholder {
            color: #6b7280;
        }

        .textarea-icon {
            color: #6b7280;
        }

        .textarea-container.error textarea {
            background-color: rgba(220, 38, 38, 0.1);
        }
    }

    /* Mobile */
    @media (max-width: 768px) {
        textarea {
            padding: 0.75rem;
            padding-left: 2.5rem;
        }

        .textarea-icon {
            left: 0.875rem;
        }
    }

    .form-submit {
        margin-top: 1.5rem;
        display: flex;
        justify-content: flex-end;
    }

    /* Styles des messages d'erreur */
    .error-message {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: 0.375rem;
        padding: 0.625rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: #dc2626;
        background-color: #fef2f2;
        border-left: 4px solid #dc2626;
        border-radius: 0 0.375rem 0.375rem 0;
        animation: slideIn 0.2s ease-out;
    }

    .error-message i {
        color: #dc2626;
    }

    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-0.25rem);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Mode sombre pour les messages d'erreur */
    @media (prefers-color-scheme: dark) {
        .error-message {
            color: #fca5a5;
            background-color: rgba(220, 38, 38, 0.1);
        }

        .error-message i {
            color: #fca5a5;
        }
    }
</style>
