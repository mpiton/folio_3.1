---
interface Props {
  variant?: 'spinner' | 'dots' | 'pulse';
  size?: 'sm' | 'md' | 'lg';
  color?: string;
  class?: string;
  label?: string;
}

const {
  variant = 'spinner',
  size = 'md',
  color = 'currentColor',
  class: className = '',
  label = 'Chargement en cours...',
} = Astro.props;
---

<div
  class:list={['loader', `loader--${variant}`, `loader--${size}`, className]}
  role="status"
  aria-label={label}
>
  {
    variant === 'spinner' && (
      <svg class="loader-spinner" viewBox="0 0 50 50">
        <circle
          class="loader-circle"
          cx="25"
          cy="25"
          r="20"
          fill="none"
          stroke={color}
          stroke-width="5"
        />
      </svg>
    )
  }

  {
    variant === 'dots' && (
      <div class="loader-dots">
        <div class="dot" style={`background-color: ${color};`} />
        <div class="dot" style={`background-color: ${color};`} />
        <div class="dot" style={`background-color: ${color};`} />
      </div>
    )
  }

  {variant === 'pulse' && <div class="loader-pulse" style={`background-color: ${color};`} />}

  <span class="loader-label">{label}</span>
</div>

<style>
  .loader {
    display: inline-flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }

  /* Spinner variant */
  .loader-spinner {
    animation: rotate 2s linear infinite;
  }

  .loader-circle {
    stroke-linecap: round;
    animation: dash 1.5s ease-in-out infinite;
  }

  @keyframes rotate {
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes dash {
    0% {
      stroke-dasharray: 1, 150;
      stroke-dashoffset: 0;
    }
    50% {
      stroke-dasharray: 90, 150;
      stroke-dashoffset: -35;
    }
    100% {
      stroke-dasharray: 90, 150;
      stroke-dashoffset: -124;
    }
  }

  /* Dots variant */
  .loader-dots {
    display: flex;
    gap: 0.5rem;
  }

  .loader-dots .dot {
    width: 0.5rem;
    height: 0.5rem;
    border-radius: 50%;
    animation: bounce 0.5s alternate infinite;
  }

  .loader-dots .dot:nth-child(2) {
    animation-delay: 0.2s;
  }

  .loader-dots .dot:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes bounce {
    to {
      transform: translateY(-0.5rem);
    }
  }

  /* Pulse variant */
  .loader-pulse {
    width: 1rem;
    height: 1rem;
    border-radius: 50%;
    animation: pulse 1s ease-in-out infinite;
  }

  @keyframes pulse {
    0% {
      transform: scale(0.8);
      opacity: 0.5;
    }
    100% {
      transform: scale(2);
      opacity: 0;
    }
  }

  /* Sizes */
  .loader--sm .loader-spinner {
    width: 1.5rem;
    height: 1.5rem;
  }

  .loader--md .loader-spinner {
    width: 2.5rem;
    height: 2.5rem;
  }

  .loader--lg .loader-spinner {
    width: 3.5rem;
    height: 3.5rem;
  }

  .loader--sm .loader-dots .dot {
    width: 0.375rem;
    height: 0.375rem;
  }

  .loader--md .loader-dots .dot {
    width: 0.5rem;
    height: 0.5rem;
  }

  .loader--lg .loader-dots .dot {
    width: 0.75rem;
    height: 0.75rem;
  }

  .loader--sm .loader-pulse {
    width: 0.75rem;
    height: 0.75rem;
  }

  .loader--md .loader-pulse {
    width: 1rem;
    height: 1rem;
  }

  .loader--lg .loader-pulse {
    width: 1.5rem;
    height: 1.5rem;
  }

  /* Label */
  .loader-label {
    font-size: 0.875rem;
    color: var(--text-color);
    opacity: 0.8;
  }

  /* Hide label visually but keep it for screen readers */
  .loader:not(:only-child) .loader-label {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Media queries */
  @media (prefers-reduced-motion: reduce) {
    .loader-spinner,
    .loader-circle,
    .loader-dots .dot,
    .loader-pulse {
      animation: none;
    }
  }
</style>
