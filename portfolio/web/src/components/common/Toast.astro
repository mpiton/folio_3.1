---
interface Props {
    id: string;
    type?: "success" | "error" | "info" | "warning";
    title?: string;
    message: string;
    duration?: number;
    showCloseButton?: boolean;
    class?: string;
}

const {
    id,
    type = "info",
    title,
    message,
    duration = 5000,
    showCloseButton = true,
    class: className = "",
} = Astro.props;

const icons = {
    success: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
    <polyline points="22 4 12 14.01 9 11.01"></polyline>
  </svg>`,
    error: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <circle cx="12" cy="12" r="10"></circle>
    <line x1="15" y1="9" x2="9" y2="15"></line>
    <line x1="9" y1="9" x2="15" y2="15"></line>
  </svg>`,
    warning: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
    <line x1="12" y1="9" x2="12" y2="13"></line>
    <line x1="12" y1="17" x2="12.01" y2="17"></line>
  </svg>`,
    info: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <circle cx="12" cy="12" r="10"></circle>
    <line x1="12" y1="16" x2="12" y2="12"></line>
    <line x1="12" y1="8" x2="12.01" y2="8"></line>
  </svg>`,
};
---

<div
    id={id}
    class:list={[
        "toast",
        `toast--${type}`,
        { "toast--with-title": title },
        className,
    ]}
    role="alert"
    aria-live="polite"
    data-duration={duration}
>
    <div class="toast-icon" set:html={icons[type]} />
    <div class="toast-content">
        {title && <h3 class="toast-title">{title}</h3>}
        <p class="toast-message">{message}</p>
    </div>
    {
        showCloseButton && (
            <button
                class="toast-close"
                aria-label="Fermer la notification"
                data-close-toast
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                >
                    <line x1="18" y1="6" x2="6" y2="18" />
                    <line x1="6" y1="6" x2="18" y2="18" />
                </svg>
            </button>
        )
    }
    <div class="toast-progress"></div>
</div>

<script>
    import { ToastManager } from "../../scripts/ToastManager";

    // Ne pas initialiser les toasts originaux
    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll(".toast--cloned").forEach((toast) => {
            if (toast instanceof HTMLElement) {
                new ToastManager(toast);
            }
        });
    });
</script>

<style>
    .toast {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        padding: 1rem;
        background-color: var(--accent-color);
        border-radius: 0.5rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        max-width: 400px;
        width: calc(100% - 2rem);
        transform: translateY(100%);
        opacity: 0;
        transition:
            transform 0.3s ease,
            opacity 0.3s ease;
        z-index: 1000;
        overflow: hidden;
    }

    .toast--visible {
        transform: translateY(0);
        opacity: 1;
    }

    .toast-icon {
        flex-shrink: 0;
        width: 1.5rem;
        height: 1.5rem;
        margin-top: 0.25rem;
    }

    .toast-icon svg {
        width: 100%;
        height: 100%;
    }

    .toast-content {
        flex-grow: 1;
        min-width: 0;
    }

    .toast-title {
        font-family: "Poppins", sans-serif;
        font-size: 1rem;
        font-weight: 600;
        margin: 0 0 0.25rem;
        color: var(--text-color);
    }

    .toast-message {
        font-size: 0.875rem;
        margin: 0;
        color: var(--text-color);
        opacity: 0.8;
        line-height: 1.4;
    }

    .toast-close {
        flex-shrink: 0;
        padding: 0.25rem;
        background: none;
        border: none;
        cursor: pointer;
        opacity: 0.5;
        transition: opacity 0.2s;
    }

    .toast-close:hover {
        opacity: 1;
    }

    .toast-close svg {
        width: 1rem;
        height: 1rem;
    }

    .toast-progress {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 3px;
        background-color: rgba(255, 255, 255, 0.3);
        transform-origin: left;
    }

    /* Variants */
    .toast--success {
        border-left: 4px solid #10b981;
        color: #10b981;
    }

    .toast--error {
        border-left: 4px solid #ef4444;
        color: #ef4444;
    }

    .toast--warning {
        border-left: 4px solid #f59e0b;
        color: #f59e0b;
    }

    .toast--info {
        border-left: 4px solid #3b82f6;
        color: #3b82f6;
    }

    /* Media queries */
    @media (max-width: 768px) {
        .toast {
            bottom: 0;
            right: 0;
            border-radius: 0.5rem 0.5rem 0 0;
            max-width: 100%;
            width: 100%;
        }
    }

    /* Animation de sortie */
    .toast:not(.toast--visible) {
        transform: translateY(100%);
        opacity: 0;
    }
</style>
