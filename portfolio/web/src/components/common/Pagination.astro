---
interface Props {
  currentPage: number;
  totalPages: number;
  maxVisiblePages?: number;
  baseUrl: string;
  class?: string;
}

const {
  currentPage,
  totalPages,
  maxVisiblePages = 5,
  baseUrl,
  class: className = '',
} = Astro.props;

function generatePageNumbers(current: number, total: number, maxVisible: number) {
  if (total <= maxVisible) {
    return Array.from({ length: total }, (_, i) => i + 1);
  }

  const pages: (number | string)[] = [];
  const sidePages = Math.floor((maxVisible - 3) / 2); // Pages on each side of current
  const leftMost = Math.max(2, current - sidePages);
  const rightMost = Math.min(total - 1, current + sidePages);

  // Always show first page
  pages.push(1);

  // Add ellipsis after first page if needed
  if (leftMost > 2) {
    pages.push('...');
  }

  // Add pages around current page
  for (let i = leftMost; i <= rightMost; i++) {
    pages.push(i);
  }

  // Add ellipsis before last page if needed
  if (rightMost < total - 1) {
    pages.push('...');
  }

  // Always show last page
  if (total > 1) {
    pages.push(total);
  }

  return pages;
}

const pages = generatePageNumbers(currentPage, totalPages, maxVisiblePages);
---

<nav
  class:list={['pagination', className]}
  role="navigation"
  aria-label="Navigation des pages"
>
  <div class="pagination-container">
    <a
      href={currentPage > 1 ? `${baseUrl}/${currentPage - 1}` : '#'}
      class:list={[
        'pagination-button',
        { 'pagination-button--disabled': currentPage === 1 },
      ]}
      aria-label="Page précédente"
      aria-disabled={currentPage === 1}
    >
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="pagination-icon">
        <polyline points="15 18 9 12 15 6"></polyline>
      </svg>
      <span>Précédent</span>
    </a>

    <ul class="pagination-list">
      {pages.map((page) => (
        <li class="pagination-item">
          {typeof page === 'number' ? (
            <a
              href={page === currentPage ? '#' : `${baseUrl}/${page}`}
              class:list={[
                'pagination-link',
                { 'pagination-link--active': page === currentPage },
              ]}
              aria-label={`Page ${page}`}
              aria-current={page === currentPage ? 'page' : undefined}
            >
              {page}
            </a>
          ) : (
            <span class="pagination-ellipsis" aria-hidden="true">...</span>
          )}
        </li>
      ))}
    </ul>

    <a
      href={currentPage < totalPages ? `${baseUrl}/${currentPage + 1}` : '#'}
      class:list={[
        'pagination-button',
        { 'pagination-button--disabled': currentPage === totalPages },
      ]}
      aria-label="Page suivante"
      aria-disabled={currentPage === totalPages}
    >
      <span>Suivant</span>
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="pagination-icon">
        <polyline points="9 18 15 12 9 6"></polyline>
      </svg>
    </a>
  </div>
</nav>

<style>
  .pagination {
    width: 100%;
    display: flex;
    justify-content: center;
    padding: 1rem 0;
  }

  .pagination-container {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .pagination-list {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
    gap: 0.25rem;
  }

  .pagination-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    color: var(--text-color);
    text-decoration: none;
    border-radius: 0.375rem;
    transition: all 0.2s;
    font-size: 0.875rem;
  }

  .pagination-button:hover:not(.pagination-button--disabled) {
    background-color: var(--secondary-color);
  }

  .pagination-button--disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }

  .pagination-icon {
    width: 1rem;
    height: 1rem;
  }

  .pagination-link {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 2rem;
    height: 2rem;
    padding: 0 0.5rem;
    color: var(--text-color);
    text-decoration: none;
    border-radius: 0.375rem;
    transition: all 0.2s;
    font-size: 0.875rem;
  }

  .pagination-link:hover:not(.pagination-link--active) {
    background-color: var(--secondary-color);
  }

  .pagination-link--active {
    background-color: var(--primary-color);
    color: var(--accent-color);
    font-weight: 600;
  }

  .pagination-ellipsis {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 2rem;
    height: 2rem;
    color: var(--text-color);
    opacity: 0.5;
  }

  /* Media queries */
  @media (max-width: 640px) {
    .pagination-button span {
      display: none;
    }

    .pagination-button {
      padding: 0.5rem;
    }

    .pagination-link {
      min-width: 1.75rem;
      height: 1.75rem;
      font-size: 0.75rem;
    }
  }
</style>
