---
import Layout from '../layouts/Layout.astro';
import { Image } from 'astro:assets';
import profilePic from '../assets/mathieu-piton.jpg';
---

<Layout title="Mathieu Piton - Développeur Web">
	<section class="hero">
		<canvas id="hero-canvas"></canvas>
		<div class="hero-content">
			<h1>Mathieu Piton</h1>
			<p>Développeur web passionné et créatif</p>
			<a href="/about" class="btn cta-button" data-astro-prefetch>Découvrir mon univers</a>
		</div>
	</section>

	<section class="about">
		<div class="about-container">
			<div class="card">
				<div class="about-content">
					<Image
						src={profilePic}
						alt="Mathieu Piton"
						width={200}
						height={200}
						class="profile-pic"
					/>
					<h2>Qui suis-je ?</h2>
					<p>
						Développeur web depuis 5 ans, je suis spécialisé dans les technologies modernes
						comme Rust et Tauri. J'aime créer des applications performantes et esthétiques,
						centrées sur l'expérience utilisateur.
					</p>
					<p class="quote">
						"Ma passion pour le code m'a amené à travailler sur des projets variés et stimulants,
						du développement backend en Rust à la création d'interfaces utilisateur avec Tauri."
					</p>
				</div>

				<div class="about-stats">
					<div class="stat">
						<i class="fab fa-html5"></i>
						<span>HTML5</span>
					</div>
					<div class="stat">
						<i class="fab fa-css3-alt"></i>
						<span>CSS3</span>
					</div>
					<div class="stat">
						<i class="fab fa-js"></i>
						<span>JavaScript</span>
					</div>
					<div class="stat">
						<i class="fab fa-rust"></i>
						<span>Rust</span>
					</div>
				</div>
			</div>
		</div>
	</section>
</Layout>

<style>
	.hero {
		height: 100vh;
		position: relative;
		display: flex;
		align-items: center;
		justify-content: center;
		text-align: center;
		color: white;
		overflow: hidden;
	}

	#hero-canvas {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: -1;
	}

	.hero-content {
		z-index: 1;
		padding: 2rem;
	}

	.hero h1 {
		font-size: 4rem;
		margin-bottom: 1rem;
		font-family: var(--font-heading);
	}

	.hero p {
		font-size: 1.5rem;
		margin-bottom: 2rem;
	}

	.cta-button {
		display: inline-block;
		padding: 1rem 2rem;
		background-color: var(--primary-color);
		color: white;
		text-decoration: none;
		border-radius: 5px;
		transition: transform 0.3s ease;
	}

	.cta-button:hover {
		transform: translateY(-2px);
	}

	.about {
		padding: 4rem 2rem;
		background-color: var(--accent-color);
	}

	.about-container {
		max-width: 1200px;
		margin: 0 auto;
	}

	.card {
		background: white;
		border-radius: 15px;
		padding: 2rem;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
	}

	.about-content {
		text-align: center;
		margin-bottom: 2rem;
	}

	.profile-pic {
		width: 200px !important;
		height: 200px !important;
		border-radius: 50%;
		margin-bottom: 1.5rem;
		object-fit: cover;
	}

	.about-content h2 {
		font-family: var(--font-heading);
		color: var(--primary-color);
		margin-bottom: 1rem;
	}

	.about-content p {
		margin-bottom: 1rem;
		line-height: 1.6;
	}

	.quote {
		font-style: italic;
		color: var(--primary-color);
	}

	.about-stats {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
		gap: 1.5rem;
		text-align: center;
	}

	.stat {
		padding: 1rem;
	}

	.stat i {
		font-size: 2rem;
		color: var(--primary-color);
		margin-bottom: 0.5rem;
	}

	.stat span {
		display: block;
		font-size: 0.9rem;
	}

	@media (max-width: 768px) {
		.hero h1 {
			font-size: 2.5rem;
		}

		.hero p {
			font-size: 1.2rem;
		}

		.profile-pic {
			width: 150px !important;
			height: 150px !important;
		}

		.about-stats {
			grid-template-columns: repeat(2, 1fr);
		}
	}
</style>

<script>
	import * as THREE from 'three';

	// Configuration de la scène Three.js
	const canvas = document.getElementById('hero-canvas');
	if (canvas) {
		const scene = new THREE.Scene();
		const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
		const renderer = new THREE.WebGLRenderer({ canvas, alpha: true });

		renderer.setSize(window.innerWidth, window.innerHeight);
		renderer.setPixelRatio(window.devicePixelRatio);

		// Création des particules
		const geometry = new THREE.BufferGeometry();
		const vertices = [];

		for (let i = 0; i < 5000; i++) {
			vertices.push(
				THREE.MathUtils.randFloatSpread(2000), // x
				THREE.MathUtils.randFloatSpread(2000), // y
				THREE.MathUtils.randFloatSpread(2000)  // z
			);
		}

		geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));

		const material = new THREE.PointsMaterial({
			color: 0x578E7E,
			size: 2,
			sizeAttenuation: true
		});

		const points = new THREE.Points(geometry, material);
		scene.add(points);

		camera.position.z = 1000;

		// Animation
		function animate() {
			requestAnimationFrame(animate);

			points.rotation.x += 0.0003;
			points.rotation.y += 0.0003;

			renderer.render(scene, camera);
		}

		// Gestion du redimensionnement
		function onWindowResize() {
			camera.aspect = window.innerWidth / window.innerHeight;
			camera.updateProjectionMatrix();
			renderer.setSize(window.innerWidth, window.innerHeight);
		}

		window.addEventListener('resize', onWindowResize, false);

		animate();
	}
</script>
