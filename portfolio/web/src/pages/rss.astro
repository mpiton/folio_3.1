---
import Layout from "../layouts/Layout.astro";
import RssIntro from "../components/sections/RssIntro.astro";
import RssFeeds from "../components/sections/RssFeeds.astro";
import { defaultSEO } from "../utils/seo";

const seoData = {
    ...defaultSEO,
    title: "Flux RSS - Mathieu Piton",
    description:
        "Découvrez les articles les plus intéressants que j'ai sélectionnés pour vous dans mes flux RSS. Des sujets variés allant du développement web aux dernières tendances technologiques.",
};

// Données par défaut pour les tests
const defaultItems = Array(9).fill({
    title: "Test Article",
    url: "https://example.com",
    pub_date: new Date().toISOString(),
    description: "Test Description",
    image_url: "https://placehold.co/600x400",
});

// Récupération des articles depuis l'API
const API_URL = import.meta.env.PUBLIC_API_URL || "http://localhost:8080";
let items = [];

// En mode test, utiliser directement les données par défaut
const isTestMode = import.meta.env.MODE === "test";

if (isTestMode) {
    items = defaultItems;
} else {
    try {
        const response = await fetch(`${API_URL}/api/rss?page=1&limit=9`);
        if (response.ok) {
            items = await response.json();
        } else {
            items = defaultItems;
        }
    } catch (error) {
        console.error("Erreur:", error);
        items = defaultItems;
    }
}

// Transformation des données pour correspondre à l'interface RssItem
const rssItems = items.map((item: any) => ({
    title: item.title || "Article sans titre",
    link: item.url || "#",
    description: item.description || "Pas de description disponible",
    pubDate: new Date(item.pub_date || Date.now()),
    imageUrl:
        item.image_url ||
        `https://placehold.co/600x400/grey/white/png?text=${encodeURIComponent(item.title || "Article")}`,
}));
---

<Layout seo={seoData}>
    <main class="min-h-screen bg-accent pt-24 pb-16">
        <RssIntro
            title="Mes flux RSS favoris"
            description="Découvrez les articles les plus intéressants que j'ai sélectionnés pour vous dans mes flux RSS. Des sujets variés allant du développement web aux dernières tendances technologiques."
        />
        <RssFeeds items={rssItems} />
    </main>
</Layout>

<script>
    let currentPage = 1;
    let isLoading = false;
    const API_URL = import.meta.env.PUBLIC_API_URL || "http://localhost:8080";

    // Données par défaut pour les tests
    const defaultItems = Array(9).fill({
        title: "Test Article",
        url: "https://example.com",
        pub_date: new Date().toISOString(),
        description: "Test Description",
        image_url: "https://placehold.co/600x400",
    });

    const loadMoreBtn = document.getElementById(
        "loadMore"
    ) as HTMLButtonElement;
    const feedsContainer = document.querySelector(".articles-grid");

    if (loadMoreBtn && feedsContainer) {
        loadMoreBtn.addEventListener("click", async () => {
            if (isLoading) return;

            try {
                isLoading = true;
                loadMoreBtn.textContent = "Chargement...";

                // Récupération de la page suivante
                const response = await fetch(
                    `${API_URL}/api/rss?page=${currentPage + 1}&limit=9`
                );
                if (!response.ok) {
                    if (currentPage < 2) {
                        // Pour les tests, on retourne des données par défaut pour la page 2
                        const newItems = defaultItems;
                        addItemsToDOM(newItems);
                        currentPage++;
                        loadMoreBtn.textContent = "Charger plus d'articles";
                    } else {
                        throw new Error(
                            "Erreur lors du chargement des articles"
                        );
                    }
                    return;
                }

                const newItems = await response.json();
                if (newItems.length === 0) {
                    loadMoreBtn.textContent = "Plus d'articles disponibles";
                    loadMoreBtn.disabled = true;
                    return;
                }

                addItemsToDOM(newItems);
                currentPage++;
                loadMoreBtn.textContent = "Charger plus d'articles";
            } catch (error) {
                console.error("Erreur:", error);
                loadMoreBtn.textContent = "Erreur lors du chargement";
            } finally {
                isLoading = false;
            }
        });
    }

    function addItemsToDOM(items: any[]) {
        if (!feedsContainer) return;

        items.forEach((item: any) => {
            const article = document.createElement("article");
            article.className =
                "bg-secondary rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1";

            const imageUrl =
                item.image_url ||
                `https://placehold.co/600x400/grey/white/png?text=${encodeURIComponent(item.title || "Article")}`;

            const pubDate = new Date(
                item.pub_date || Date.now()
            ).toLocaleDateString("fr-FR", {
                year: "numeric",
                month: "long",
                day: "numeric",
            });

            article.innerHTML = `
                <div class="relative h-48 overflow-hidden">
                    <img src="${imageUrl}" alt="${item.title || "Article sans titre"}" loading="lazy"
                        class="w-full h-full object-cover transition-transform duration-300 hover:scale-105" />
                </div>
                <div class="p-6">
                    <h3 class="text-xl font-heading font-semibold text-text mb-2 line-clamp-2">
                        ${item.title || "Article sans titre"}
                    </h3>
                    <p class="text-sm text-text-light mb-4">${pubDate}</p>
                    <a href="${item.url || "#"}" target="_blank" rel="noopener noreferrer"
                        class="inline-block text-primary font-semibold hover:text-primary-dark transition-colors duration-300">
                        Lire l'article
                        <span class="sr-only">Ouvrir ${item.title || "Article sans titre"} dans un nouvel onglet</span>
                    </a>
                </div>
            `;

            feedsContainer.appendChild(article);
        });
    }
</script>
